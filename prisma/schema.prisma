// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Alternative pour SQLite (décommentez la ligne suivante et commentez les 2 lignes au-dessus)
  // provider = "sqlite"
  // url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  role      Role     @default(SECTOR_MANAGER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  managedSites    Site[]
  households      Household[]
  sentNotifications Notification[]
  createdAlerts   Alert[]
  sentmaintenanceReports SensorMaintenanceReport[]
  systemSettings  SystemSettings[]
  siteSettings    SiteSettings[]
  refillReports   RefillReport[]

  @@map("users")
}

model Site {
  id                String   @id @default(cuid())
  name              String
  address           String
  latitude          Float
  longitude         Float
  reservoirCapacity Int
  currentLevel      Int
  sectorManagerId   String
  lastRefill        DateTime
  status            SiteStatus @default(ACTIVE)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  sectorManager User @relation(fields: [sectorManagerId], references: [id])
  households    Household[]
  notifications Notification[]
  waterLevels   WaterLevel[]
  maintenances  Maintenance[]
  alerts        Alert[]
  sensors       Sensor[]
  siteSettings  SiteSettings[]
  refillReports RefillReport[]

  @@map("sites")
}

model Household {
  id        String   @id @default(cuid())
  name      String
  contact   String
  email     String?
  address   String
  siteId    String
  userId    String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id])
  user User? @relation(fields: [userId], references: [id])

  @@map("households")
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  message     String
  recipients  String[]
  sentAt      DateTime         @default(now())
  status      NotificationStatus @default(PENDING)
  siteId      String?
  sentById    String
  response    String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  // Relations
  site   Site? @relation(fields: [siteId], references: [id])
  sentBy User  @relation(fields: [sentById], references: [id])

  @@map("notifications")
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        AnnouncementType
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("announcements")
}

model WaterLevel {
  id        String   @id @default(cuid())
  siteId    String
  level     Int
  timestamp DateTime @default(now())
  source    String   @default("sensor") // sensor, manual, estimated

  // Relations
  site Site @relation(fields: [siteId], references: [id])

  @@map("water_levels")
}

model Maintenance {
  id          String            @id @default(cuid())
  siteId      String
  type        MaintenanceType
  description String
  scheduledAt DateTime
  completedAt DateTime?
  status      MaintenanceStatus @default(SCHEDULED)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  site Site @relation(fields: [siteId], references: [id])

  @@map("maintenances")
}

model Alert {
  id           String    @id @default(cuid())
  siteId       String
  type         AlertType
  message      String
  level        AlertLevel
  isActive     Boolean   @default(true)
  resolvedAt   DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  String?
  actionTaken  String?
  actionTakenAt DateTime?

  // Relations
  site      Site @relation(fields: [siteId], references: [id])
  createdBy User? @relation(fields: [createdById], references: [id])

  @@map("alerts")
}

model Sensor {
  id            String   @id @default(cuid())
  siteId        String
  name          String
  type          String
  serialNumber  String   @unique
  installedAt   DateTime @default(now())
  isActive      Boolean  @default(true)
  configuration SensorConfiguration?
  diagnostics   SensorDiagnostic[]
  maintenances  SensorMaintenanceReport[]

  // Relations
  site Site @relation(fields: [siteId], references: [id])

  @@map("sensors")
}

model SensorConfiguration {
  id           String   @id @default(cuid())
  sensorId     String   @unique
  calibration  String   // JSON ou texte décrivant le calibrage
  parameters   String   // JSON ou texte pour autres paramètres
  updatedAt    DateTime @updatedAt

  // Relations
  sensor Sensor @relation(fields: [sensorId], references: [id])

  @@map("sensor_configurations")
}

model SensorDiagnostic {
  id            String   @id @default(cuid())
  sensorId      String
  batteryLevel  Float
  signalStrength Float
  lastChecked   DateTime @default(now())
  status        String   // OK, WARNING, ERROR, etc.
  details       String?  // Infos supplémentaires

  // Relations
  sensor Sensor @relation(fields: [sensorId], references: [id])

  @@map("sensor_diagnostics")
}

model SensorMaintenanceReport {
  id          String   @id @default(cuid())
  sensorId    String
  technicianId String
  reportType  String   // maintenance, troubleshooting, calibration, etc.
  summary     String
  details     String?
  createdAt   DateTime @default(now())

  // Relations
  sensor      Sensor @relation(fields: [sensorId], references: [id])
  technician  User   @relation(fields: [technicianId], references: [id])

  @@map("sensor_maintenance_reports")
}

// Modèle pour les rapports de recharge de citernes
model RefillReport {
  id              String   @id @default(cuid())
  siteId          String
  reportedById    String
  refillDate      DateTime @default(now())
  volumeRefilled  Float    // Volume en litres rechargé
  previousLevel   Int?     // Niveau précédent en pourcentage (optionnel)
  currentLevel    Int      // Niveau actuel en pourcentage après recharge
  cost            Float?   // Coût de la recharge (optionnel)
  supplier        String?  // Fournisseur/transporteur (optionnel)
  notes           String?  // Notes additionnelles
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  site        Site @relation(fields: [siteId], references: [id])
  reportedBy  User @relation(fields: [reportedById], references: [id])

  @@map("refill_reports")
}

// Nouveau modèle pour les paramètres système globaux
model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String   // JSON string pour les objets complexes
  description String?
  category    String   @default("general") // general, alerts, notifications, maintenance
  isActive    Boolean  @default(true)
  updatedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  updatedBy User @relation(fields: [updatedById], references: [id])

  @@map("system_settings")
}

// Nouveau modèle pour les paramètres spécifiques aux sites
model SiteSettings {
  id          String   @id @default(cuid())
  siteId      String
  key         String
  value       String   // JSON string pour les objets complexes
  description String?
  category    String   @default("site") // site, alerts, maintenance
  isActive    Boolean  @default(true)
  updatedById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  site      Site @relation(fields: [siteId], references: [id])
  updatedBy User @relation(fields: [updatedById], references: [id])

  @@unique([siteId, key])
  @@map("site_settings")
}

// Enums
enum Role {
  ADMIN
  SECTOR_MANAGER
  TECHNICIAN
}

enum SiteStatus {
  ACTIVE
  MAINTENANCE
  EMERGENCY
  INACTIVE
}

enum NotificationType {
  LOW_LEVEL
  REFILL
  MAINTENANCE
  EMERGENCY
  GENERAL
}

enum NotificationStatus {
  PENDING
  SENT
  FAILED
  DELIVERED
}

enum AnnouncementType {
  NEWS
  MAINTENANCE
  EMERGENCY
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  INSPECTION
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum AlertType {
  LOW_WATER_LEVEL
  SENSOR_FAILURE
  PUMP_FAILURE
  LEAK_DETECTED
  MAINTENANCE_DUE
}

enum AlertLevel {
  INFO
  WARNING
  CRITICAL
  EMERGENCY
}